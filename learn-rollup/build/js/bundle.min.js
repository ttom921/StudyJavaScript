(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('axios'), require('rxjs')) :
  typeof define === 'function' && define.amd ? define(['axios', 'rxjs'], factory) :
  (global = global || self, global.monitor = factory(global.axios, global.rxjs));
}(this, (function (axios, rxjs) { 'use strict';

  axios = axios && axios.hasOwnProperty('default') ? axios['default'] : axios;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var util = {
    generatedId: function generatedId() {
      return Math.random().toString(36).substr(2);
    }
  };

  var postRequest = axios.create({
    baseURL: 'http://localhost:3000'
  }); //C

  // }

  var Rxios =
  /*#__PURE__*/
  function () {
    function Rxios() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Rxios);

      this._httpClient = axios.create(options);
    }

    _createClass(Rxios, [{
      key: "_makeRequest",
      value: function _makeRequest(method, url, queryParams) {
        var body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var request;

        switch (method) {
          case 'GET':
            request = this._httpClient.get(url, {
              params: queryParams
            });
            break;

          case 'POST':
            request = this._httpClient.post(url, body, {
              params: queryParams
            });
            break;

          case 'PUT':
            request = this._httpClient.put(url, body, {
              params: queryParams
            });
            break;

          case 'PATCH':
            request = this._httpClient.patch(url, body, {
              params: queryParams
            });
            break;

          case 'DELETE':
            request = this._httpClient["delete"](url, {
              params: queryParams
            });
            break;

          default:
            throw new Error('Method not supported');
        }

        return new rxjs.Observable(function (subscriber) {
          request.then(function (response) {
            subscriber.next(response.data);
            subscriber.complete();
          })["catch"](function (err) {
            subscriber.error(err);
            subscriber.complete();
          });
        });
      }
    }, {
      key: "get",
      value: function get(url) {
        var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return this._makeRequest('GET', url, queryParams);
      }
    }, {
      key: "post",
      value: function post(url) {
        var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var queryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return this._makeRequest('POST', url, queryParams, body);
      }
    }, {
      key: "put",
      value: function put(url) {
        var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var queryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return this._makeRequest('PUT', url, queryParams, body);
      }
    }, {
      key: "patch",
      value: function patch(url) {
        var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var queryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return this._makeRequest('PATCH', url, queryParams, body);
      }
    }, {
      key: "delete",
      value: function _delete(url) {
        var queryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return this._makeRequest('DELETE', url, queryParams);
      }
    }]);

    return Rxios;
  }();

  var Engine =
  /*#__PURE__*/
  function () {
    function Engine() {
      _classCallCheck(this, Engine);

      this.id = util.generatedId();
    }

    _createClass(Engine, [{
      key: "init",
      value: function init(appid) {
        if (!appid) {
          console.log("error no appid");
          return;
        }

        this.appid = appid;
        console.log('引擎開始起動了…');
      }
    }, {
      key: "showAppid",
      value: function showAppid() {
        console.log('appid=' + this.appid);
      }
    }, {
      key: "GetUsers",
      value: function GetUsers() {
        //#region Post CRUD
        // apiPostPost({
        //     "title": "My test",
        //     "author": "10codeing"
        // })
        //     .then((res) => { console.log(res.data) })
        //     .catch((error) => { console.error(error) })
        //     .finally(() => { /* 不論失敗成功皆會執行 */ });
        //取得所有
        // apiPostGet()
        //     .then((res) => { console.log(res.data) })
        //     .catch((error) => { console.error(error) })
        //     .finally(() => { /* 不論失敗成功皆會執行 */ });
        //取得特定
        // apiPostGet({
        //     params: {
        //         id: 2
        //     }
        // })
        //     .then((res) => { console.log(res.data) })
        //     .catch((error) => { console.error(error) })
        //     .finally(() => { /* 不論失敗成功皆會執行 */ });
        //put
        // apiPostPut({
        //     id: '2',
        //     title: 'My test2',
        //     author: '10codeing2'
        // })
        //     .then((res) => { console.log(res.data) })
        //     .catch((error) => { console.error(error) })
        //     .finally(() => { /* 不論失敗成功皆會執行 */ });
        //patch
        // apiPostPatch({
        //     id: '3',
        //     title: 'My test3patch',
        // })
        //     .then((res) => { console.log(res.data) })
        //     .catch((error) => { console.error(error) })
        //     .finally(() => { /* 不論失敗成功皆會執行 */ });
        // apiPostDelete({
        //     id: 2
        // })
        //     .then((res) => { console.log(res.data) })
        //     .catch((error) => { console.error(error) })
        //     .finally(() => { /* 不論失敗成功皆會執行 */ });
        // //end #region 取得所有的使用者
        //-----------------------
        // const http = new Rxios({
        //     baseURL: 'https://jsonplaceholder.typicode.com',
        // });
        // // plain GET request
        // http.get('/posts').subscribe(
        //     response => {
        //         console.log(response); // no need to 'response.data'
        //     },
        //     err => {
        //         console.error(err);
        //     }
        // );
        var http = new Rxios({
          baseURL: 'http://localhost:3000'
        }); //create
        // http.post('/posts', {
        //     "title": "My test",
        //     "author": "10codeing"
        // }).subscribe(
        //     response => {
        //         console.log(response); // no need to 'response.data'
        //     },
        //     err => {
        //         console.error(err);
        //     }
        // );
        // R get

        http.get('/posts').subscribe(function (response) {
          console.log(response);
        }, function (err) {
          console.error(err);
        }); //
        //取得特定

        http.get('/posts', {
          id: 2
        }).subscribe(function (response) {
          console.log(response);
        }, function (err) {
          console.error(err);
        }); // u put

        var body = {
          title: 'My test2',
          author: '10codeing2'
        };
        http.put('/posts/2', body).subscribe(function (response) {
          console.log(response);
        }, function (err) {
          console.error(err);
        }); //u patch 可更新部份

        body = {
          title: 'My testpatch'
        };
        http.patch('/posts/3', body).subscribe(function (response) {
          console.log(response);
        }, function (err) {
          console.error(err);
        }); //detel
        // http.delete('/posts/4').subscribe(
        //     response => {
        //         console.log(response);
        //     },
        //     err => {
        //         console.error(err);
        //     }
        // );
      }
    }]);

    return Engine;
  }(); //get Singleton


  var getHSApi = function () {
    var engine = null;
    return function () {
      if (!engine) {
        engine = new Engine();
      }

      return engine;
    };
  }();

  return getHSApi;

})));
